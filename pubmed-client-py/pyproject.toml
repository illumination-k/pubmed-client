[build-system]
requires = ["maturin>=1.0,<2.0"]
build-backend = "maturin"

[project]
name = "pubmed-client-py"
version = "0.0.1"
description = "Python bindings for PubMed and PMC APIs for retrieving biomedical research articles"
authors = [{ name = "illumination-k" }]
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.12"
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Rust",
  "Topic :: Scientific/Engineering :: Bio-Informatics",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["pubmed", "pmc", "biomedical", "research", "api", "bioinformatics"]

[project.urls]
Homepage = "https://github.com/illumination-k/pubmed-client-rs"
Repository = "https://github.com/illumination-k/pubmed-client-rs"
Documentation = "https://github.com/illumination-k/pubmed-client-rs/tree/main/pubmed-client-py"

[tool.maturin]
# Rust lib name is pubmed_client_py, but Python module name is pubmed_client
module-name = "pubmed_client_py.pubmed_client"
features = []
# Include type stub files for IDE and mypy support
include = ["pubmed_client.pyi"]

[dependency-groups]
dev = ["pytest>=8.0", "pytest-cov>=6.0", "mypy>=1.0", "ruff>=0.7"]

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
  # basic ignore
  "E501", # Line too long (ignored by pysen)
  "D", # pydocstyle (https://pypi.org/project/pydocstyle/)
  "ICN", # flake8-import-conventions (https://github.com/joaopalmeiro/flake8-import-conventions) # NOQA

  # strict ignore
  "S101", # Use of `assert` detected
  # "T20", # flake8-print (https://pypi.org/project/flake8-print/)
  "ANN", # flkae8-annotations (https://pypi.org/project/flake8-annotations/)
  "INP001", # File {file} is part of an implicit namespace package. Add an `__init__.py`.

  # fmt confilict ignore
  # https://docs.astral.sh/ruff/formatter/#format-suppression
  "W191",
  "E111",
  "E114",
  "E117",
  "D206",
  "D300",
  "Q000",
  "Q001",
  "Q002",
  "Q003",
  "COM812",
  "COM819",
  "ISC001",
  "ISC002",

  # custom ignore
  "RET504", # Unnecessary assignment to `text` before `return` statement
  "RUF001", # Docstring contains ambiguous `ノ` (KATAKANA LETTER NO). Did you mean `/` (SOLIDUS)?
  "RUF002", # Docstring contains ambiguous `ノ` (KATAKANA LETTER NO). Did you mean `/` (SOLIDUS)?
  "RUF015", # Prefer `next(...)` over single element slice
  "TD001", # Invalid TODO tag: `FIXME`
  "TD002", # Missing author in TODO
  "TD003", # Missing issue link on the line following this TODO
  "FIX001", # Line contains FIXME, consider resolving the issue
  "FIX002", # Line contains TODO, consider resolving the issue
  "PTH123", # open()` should be replaced by `Path.open()`

  # mypy support問題
  "UP040", # type statement
]

extend-select = [
  "I", # isort (https://pypi.org/project/isort/)
  "E", # pycodestyle (https://pypi.org/project/pycodestyle/)
  "F", # pyflakes (https://pypi.org/project/pyflakes/)
  "W", # pycodestyle (https://pypi.org/project/pycodestyle/)
  "B", # flake8-bugbear (https://pypi.org/project/flake8-bugbear/)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
  "PLC0415", # Import should be at top-level (intentional in tests for lazy import)
  "PLR2004", # Magic value in comparison (acceptable in tests)
]
"examples/*" = [
  "T201", # print() is expected in examples
  "C901", # Complexity is acceptable in example scripts
  "PLR0912", # Many branches acceptable in examples
  "PLR0915", # Many statements acceptable in examples
  "PLR2004", # Magic values acceptable in examples
  "F541", # f-string without placeholders
  "S311", # Random for non-cryptographic purposes
  "BLE001", # Blind except acceptable in examples
  "S110", # try-except-pass acceptable in examples
  "S603", # subprocess without shell=True
  "S607", # Starting process with partial path
  "ERA001", # Commented-out code acceptable in examples
]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
check_untyped_defs = true
disallow_untyped_defs = true
disallow_untyped_calls = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
